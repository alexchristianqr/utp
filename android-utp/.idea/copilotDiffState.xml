<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/androidutp/semana_07/AlumnoActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/androidutp/semana_07/AlumnoActivity.kt" />
              <option name="originalContent" value="package com.app.androidutp.semana_07&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import com.app.androidutp.R&#10;import com.app.androidutp.Utilidad&#10;import com.google.android.material.textfield.TextInputEditText&#10;&#10;class AlumnoActivity : AppCompatActivity() {&#10;    private lateinit var tvRespuesta: TextView&#10;    private lateinit var txtCodigo: TextInputEditText&#10;    private lateinit var txtNombres: TextInputEditText&#10;    private lateinit var txtApellidos: TextInputEditText&#10;    private lateinit var txtEdad: TextInputEditText&#10;    private lateinit var btnRegistrar: Button&#10;    private lateinit var alumnoService: AlumnoService&#10;    private lateinit var alumno: Alumno&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContentView(R.layout.semana_07)&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Referenciar componentes de la interfaz&#10;        referenciar()&#10;&#10;        // Configurar evento del botón&#10;        btnRegistrar.setOnClickListener {&#10;&#10;            registrar()&#10;        }&#10;    }&#10;&#10;    fun referenciar() {&#10;        txtCodigo = findViewById(R.id.txtCodigo)&#10;        txtNombres = findViewById(R.id.txtNombres)&#10;        txtApellidos = findViewById(R.id.txtApellidos)&#10;        txtEdad = findViewById(R.id.txtEdad)&#10;        btnRegistrar = findViewById(R.id.btnRegistrar)&#10;        tvRespuesta = findViewById(R.id.tvRespuesta)&#10;    }&#10;&#10;&#10;    fun registrar() {&#10;        if(!validarFormulario()){&#10;            return&#10;        }&#10;        alumnoService = AlumnoService(this)&#10;        alumno = Alumno(&#10;            codigo = txtCodigo.text.toString(),&#10;            nombres = txtNombres.text.toString(),&#10;            apellidos = txtApellidos.text.toString(),&#10;            edad = txtEdad.text.toString().toInt()&#10;        )&#10;&#10;&#10;        val rpta = alumnoService.registrarAlumno(alumno)&#10;        print(rpta)&#10;&#10;        resetearCampos()&#10;        tvRespuesta.text = rpta&#10;    }&#10;&#10;    fun validarFormulario(): Boolean {&#10;        val codigo = txtCodigo.text.toString().trim()&#10;        val nombres = txtNombres.text.toString().trim()&#10;        val apellidos = txtApellidos.text.toString().trim()&#10;        val edadStr = txtEdad.text.toString().trim()&#10;&#10;        if (codigo.isEmpty()) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El código no puede estar vacío.&quot;)&#10;            return false&#10;        }&#10;        if (codigo.length &lt; 4) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El código debe tener al menos 4 caracteres.&quot;)&#10;            return false&#10;        }&#10;        if (!codigo.matches(Regex(&quot;^[a-zA-Z0-9]+$&quot;))) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El código solo puede contener letras y números.&quot;)&#10;            return false&#10;        }&#10;        if (nombres.isEmpty()) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El nombre no puede estar vacío.&quot;)&#10;            return false&#10;        }&#10;        if (nombres.length &lt; 2) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El nombre debe tener al menos 2 caracteres.&quot;)&#10;            return false&#10;        }&#10;        if (!nombres.matches(Regex(&quot;^[a-zA-ZáéíóúÁÉÍÓÚüÜñÑ ]+$&quot;))) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El nombre solo puede contener letras.&quot;)&#10;            return false&#10;        }&#10;        if (apellidos.isEmpty()) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El apellido no puede estar vacío.&quot;)&#10;            return false&#10;        }&#10;        if (apellidos.length &lt; 2) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El apellido debe tener al menos 2 caracteres.&quot;)&#10;            return false&#10;        }&#10;        if (!apellidos.matches(Regex(&quot;^[a-zA-ZáéíóúÁÉÍÓÚüÜñÑ ]+$&quot;))) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El apellido solo puede contener letras.&quot;)&#10;            return false&#10;        }&#10;        if (edadStr.isEmpty()) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;La edad no puede estar vacía.&quot;)&#10;            return false&#10;        }&#10;        val edad = edadStr.toIntOrNull()&#10;        if (edad == null) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;La edad debe ser un número válido.&quot;)&#10;            return false&#10;        }&#10;        if (edad &lt; 16 || edad &gt; 100) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;La edad debe estar entre 16 y 100 años.&quot;)&#10;            return false&#10;        }&#10;        return true&#10;    }&#10;&#10;    fun resetearCampos() {&#10;        txtCodigo.setText(&quot;&quot;)&#10;        txtNombres.setText(&quot;&quot;)&#10;        txtApellidos.setText(&quot;&quot;)&#10;        txtEdad.setText(&quot;&quot;)&#10;        tvRespuesta.setText(&quot;-&quot;)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.androidutp.semana_07&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import com.app.androidutp.R&#10;import com.app.androidutp.Utilidad&#10;import com.google.android.material.textfield.TextInputEditText&#10;&#10;class AlumnoActivity : AppCompatActivity() {&#10;    private lateinit var tvRespuesta: TextView&#10;    private lateinit var txtCodigo: TextInputEditText&#10;    private lateinit var txtNombres: TextInputEditText&#10;    private lateinit var txtApellidos: TextInputEditText&#10;    private lateinit var txtEdad: TextInputEditText&#10;    private lateinit var btnRegistrar: Button&#10;    private lateinit var alumnoService: AlumnoService&#10;    private lateinit var alumno: Alumno&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContentView(R.layout.semana_07)&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;&#10;        // Referenciar componentes de la interfaz&#10;        referenciar()&#10;&#10;        // Configurar evento del botón&#10;        btnRegistrar.setOnClickListener {&#10;&#10;            registrar()&#10;        }&#10;    }&#10;&#10;    fun referenciar() {&#10;        txtCodigo = findViewById(R.id.txtCodigo)&#10;        txtNombres = findViewById(R.id.txtNombres)&#10;        txtApellidos = findViewById(R.id.txtApellidos)&#10;        txtEdad = findViewById(R.id.txtEdad)&#10;        btnRegistrar = findViewById(R.id.btnRegistrar)&#10;        tvRespuesta = findViewById(R.id.tvRespuesta)&#10;    }&#10;&#10;&#10;    fun registrar() {&#10;        if(!validarFormulario()){&#10;            return&#10;        }&#10;        alumnoService = AlumnoService(this)&#10;        alumno = Alumno(&#10;            codigo = txtCodigo.text.toString(),&#10;            nombres = txtNombres.text.toString(),&#10;            apellidos = txtApellidos.text.toString(),&#10;            edad = txtEdad.text.toString().toInt()&#10;        )&#10;&#10;&#10;        val rpta = alumnoService.registrarAlumno(alumno)&#10;        print(rpta)&#10;&#10;        resetearCampos()&#10;        tvRespuesta.text = rpta&#10;    }&#10;&#10;    fun validarFormulario(): Boolean {&#10;        val codigo = txtCodigo.text.toString().trim()&#10;        val nombres = txtNombres.text.toString().trim()&#10;        val apellidos = txtApellidos.text.toString().trim()&#10;        val edadStr = txtEdad.text.toString().trim()&#10;&#10;        if (codigo.isEmpty()) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El código no puede estar vacío.&quot;)&#10;            return false&#10;        }&#10;        if (codigo.length &lt; 4) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El código debe tener al menos 4 caracteres.&quot;)&#10;            return false&#10;        }&#10;        if (!codigo.matches(Regex(&quot;^[a-zA-Z0-9]+$&quot;))) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El código solo puede contener letras y números.&quot;)&#10;            return false&#10;        }&#10;        if (nombres.isEmpty()) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El nombre no puede estar vacío.&quot;)&#10;            return false&#10;        }&#10;        if (nombres.length &lt; 2) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El nombre debe tener al menos 2 caracteres.&quot;)&#10;            return false&#10;        }&#10;        if (!nombres.matches(Regex(&quot;^[a-zA-ZáéíóúÁÉÍÓÚüÜñÑ ]+$&quot;))) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El nombre solo puede contener letras.&quot;)&#10;            return false&#10;        }&#10;        if (apellidos.isEmpty()) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El apellido no puede estar vacío.&quot;)&#10;            return false&#10;        }&#10;        if (apellidos.length &lt; 2) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El apellido debe tener al menos 2 caracteres.&quot;)&#10;            return false&#10;        }&#10;        if (!apellidos.matches(Regex(&quot;^[a-zA-ZáéíóúÁÉÍÓÚüÜñÑ ]+$&quot;))) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;El apellido solo puede contener letras.&quot;)&#10;            return false&#10;        }&#10;        if (edadStr.isEmpty()) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;La edad no puede estar vacía.&quot;)&#10;            return false&#10;        }&#10;        val edad = edadStr.toIntOrNull()&#10;        if (edad == null) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;La edad debe ser un número válido.&quot;)&#10;            return false&#10;        }&#10;        if (edad &lt; 16 || edad &gt; 100) {&#10;            Utilidad.mostrarAlerta(this, &quot;Error&quot;, &quot;La edad debe estar entre 16 y 100 años.&quot;)&#10;            return false&#10;        }&#10;        return true&#10;    }&#10;&#10;    fun resetearCampos() {&#10;        txtCodigo.setText(&quot;&quot;)&#10;        txtNombres.setText(&quot;&quot;)&#10;        txtApellidos.setText(&quot;&quot;)&#10;        txtEdad.setText(&quot;&quot;)&#10;        tvRespuesta.setText(&quot;-&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>